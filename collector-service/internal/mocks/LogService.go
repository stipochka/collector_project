// Code generated by mockery v2.53.4. DO NOT EDIT.

package servicemock

import (
	models "collector-service/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LogService is an autogenerated mock type for the LogService type
type LogService struct {
	mock.Mock
}

// Stop provides a mock function with no fields
func (_m *LogService) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreBatch provides a mock function with given fields: ctx, batch
func (_m *LogService) StoreBatch(ctx context.Context, batch []models.TelemetryRecord) error {
	ret := _m.Called(ctx, batch)

	if len(ret) == 0 {
		panic("no return value specified for StoreBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.TelemetryRecord) error); ok {
		r0 = rf(ctx, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLogService creates a new instance of LogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogService {
	mock := &LogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
